from app.repo_usuario import RepoUsuario
from app.serv_usuario import ServicoUsuario
from app.utils import Utils
from app.frases import FraseDia
from app.dilema import Dilema
from app.desafios import DesafioBem, ListaDesafios, RepoVoucher
from app.ui import Ui
from rich.table import Table
from rich import box


class BemMais:
     """
     Classe principal da aplica√ß√£o BEM+.

     Respons√°vel por orquestrar os m√≥dulos do sistema:
     cadastro, login, menus, dilemas √©ticos, desafios, pontua√ß√£o e ranking.
     """
     def __init__(self):
          """
          Aplica√ß√£o BEM+ que orquestra todos os m√≥dulos do sistema.

          Nesta inicializa√ß√£o s√£o configurados:
               - repo_user: reposit√≥rio de usu√°rios (persist√™ncia em JSON).
               - serv_user: servi√ßo de fluxo interativo de usu√°rio (cadastro, edi√ß√£o, etc.).
               - dilema: m√≥dulo de cen√°rios √©ticos, carregando perguntas de arquivo JSON.
               - serv_frase: servi√ßo respons√°vel por gerenciar a Frase do Dia.
               - desafios: m√≥dulo de ‚ÄúDesafios do Bem‚Äù, com desafios regulares e premium (com voucher).
          """
          self.ui = Ui()
          self.repo_user = RepoUsuario()
          self.serv_user = ServicoUsuario(self.repo_user, self.ui)
          desafios_repo = ListaDesafios()
          voucher_repo = RepoVoucher()
          self.dilema = Dilema(self.repo_user)
          self.serv_frase = FraseDia(self.ui)
          self.desafios = DesafioBem(self.repo_user, desafios_repo, voucher_repo, self.ui)

     def pontuacaoENivel(self, email):
          """
          Exibe, com uma sauda√ß√£o personalizada, a pontua√ß√£o e
          o n√≠vel do usu√°rio com base nos pontos acumulados.

          Args:
               email (str): email do usu√°rio cujo progresso ser√° exibido.
          """
          user = self.repo_user.buscar(email)

          if user.pontos < 10:
               nivel = 'Iniciante üê£'
          elif user.pontos < 40:
               nivel = 'Explorador üå±'
          elif user.pontos < 70:
               nivel = 'Consciente üí°'
          elif user.pontos < 90:
               nivel = 'Mentor üåü'
          else:
               nivel = 'Mestre üëë'
               
          Utils.limparTela()
          self.ui.tituloDaFuncRich("Pontua√ß√£o e N√≠vel", cor="cyan")   
          saudacao = f"üöÄ Ol√°, {user.nome}! Sua jornada pelo BEM+ est√° em andamento."
          self.ui.escrever(saudacao, delay=0.01)
          tabela = Table(box=None, show_header=False, padding=(0,1))
          tabela.add_column("M√©trica", style="bold cyan")
          tabela.add_column("Valor", style="white")
          tabela.add_row("‚≠ê Pontua√ß√£o total", f"{user.pontos} pontos")
          tabela.add_row("üî∞ N√≠vel atual", nivel)
          self.ui.console.print(tabela)

     def rankingUsuarios(self):
          """
          Exibe um Ranking do top cinco usu√°rios com maior pontua√ß√£o,
          em um layout Rich com medalhas para os 3 melhores colocados.
          
          Args:
               email (str): Email do usu√°rio.
          """
          
          # Busca e ordena os usu√°rios
          users = sorted(
               self.repo_user.listar(),
               key=lambda u: u.pontos,
               reverse=True
          )[:5]
          
          self.ui.tituloDaFuncRich("üèÜ Ranking de Usu√°rios üèÜ", cor="gold1")

          # Tabela Rich
          tabela = Table(
               show_header=True,
               header_style="bold magenta",
               box=None,
               padding=(0,1),
          )
          tabela.add_column("Pos", justify="center", style="cyan")
          tabela.add_column("Nome", style="green")
          tabela.add_column("Pontos", justify="right", style="yellow")

          # Medalhas para os 3 primeiros
          medalhas = {1: "ü•á", 2: "ü•à", 3: "ü•â"}

          for pos, user in enumerate(users, start=1):
               medalha = medalhas.get(pos, " ")
               # d√° negrito aos tr√™s primeiros
               row_style = "bold" if pos <= 3 else ""
               tabela.add_row(
                    f"{medalha} {pos}",
                    user.nome,
                    str(user.pontos),
                    style=row_style
               )

          self.ui.console.print(tabela)    
          
     # Hist√≥rico de Respostas do usu√°rio:
     def exibirHistorico(self,email):
          """
          Exibe o hist√≥rico de respostas do usu√°rio aos cen√°rios √©ticos, quando existir.
          
          Args:
               email (str): email do usu√°rio cujo hist√≥rico ser√° exibido.
          """     
          user = self.repo_user.buscar(email)
          Utils.limparTela()
          historico = user.historico_respostas
          self.ui.tituloDaFuncRich("üìÉ Hist√≥rico de Respostas üìÉ", cor="purple")
          
          if not historico:
               self.ui.console.print("\n[yellow]ü§î Voc√™ ainda n√£o realizou nenhum cen√°rio √©tico.[/yellow]")
               return
          
          else:
               tabela = Table(
                title="Sua Jornada de Reflex√µes",
                box=box.ROUNDED,
                header_style="bold purple",
                border_style="purple",
                show_lines=True
            )
          tabela.add_column("Data", style="cyan", justify="center", width=12)
          tabela.add_column("Pergunta do Cen√°rio", style="white", min_width=30, ratio=1)
          tabela.add_column("Sua Resposta", style="green", justify="center")
          tabela.add_column("Pontos", style="yellow", justify="right")
          
          for item in historico:
               tabela.add_row(
                    item["data"],
                    item["pergunta"],
                    f"[bold]{item['resposta_key']}[/bold] ‚Äì {item['texto_resposta']}",
                    f"+{item['pontos']}"
               )
            
          self.ui.console.print(tabela)
      
     # Menu do usu√°rio logado:
     def login(self):
          """
          Apresenta o menu principal do BEM+ com todas as funcionalidades dispon√≠veis.

          Args:
               email (str): Email do usu√°rio logado.
          """
          email = Utils.naoVazio("Digite seu email: ").lower()
          senha = Utils.naoVazio("Digite sua senha: ")
          user = self.repo_user.buscar(email)
          if not (user and user.senha == senha):
               print("Email ou senha inv√°lidos. ")
               self.ui.pausar()
               return
          
          while True:
               Utils.limparTela()
               self.ui.tituloDaFuncRich(f"Bem-vindo, {user.nome}", cor="blue")
               
               itens = [
                    ("1", "Prosseguir para o Menu BEM+"),
                    ("2", "Editar Conta"),
                    ("3", "Deletar Conta"),
                    ("0", "Sair"),
               ]
               self.ui.showMenu("Op√ß√µes de Conta", itens, cor="blue")

               opcao = self.ui.console.input("\n[bold]Op√ß√£o:[/bold] ").strip()
               match opcao:
                    case '1':
                         print("Ent√£o vamos continuar! ")
                         self.menuBem(email)
                    case '2':
                         email = self.serv_user.editarConta(email)
                    case '3':
                         if self.serv_user.deletarConta(email):
                              return
                    case '0':
                         print("Ok! At√© logo...")
                         return
                    case _:
                         self.ui.console.print("[red]Op√ß√£o inv√°lida![/red]")          
                         self.ui.pausar()
                         Utils.limparTela()

     # Menu BEM+:
     def menuBem(self,email):
          """
          Apresenta o menu principal do BEM+ com as op√ß√µes de funcionalidades ao usu√°rio.

          Args:
               email (str): email do usu√°rio logado.
          """    
          while True:
               Utils.limparTela()
               user = self.repo_user.buscar(email) 
               opcao_bem  = self.ui.menuBemRich(user.nome)
               
               match opcao_bem:
                    case '1':
                         self.serv_frase.fraseDia()
                         self.ui.pausar()
                    
                    case '2':
                         pontos = self.dilema.executarDilema(email)
                         user.pontos += pontos
                         self.repo_user.salvarUsuarios()
                         
                    case '3':
                         self.desafios.desafiosBem(email)
                         
                    case '4':
                         self.pontuacaoENivel(email)
                         self.ui.pausar()
                    
                    case '5':
                         self.rankingUsuarios()
                         self.ui.pausar()
                    
                    case '6':
                         self.exibirHistorico(email)
                         self.ui.pausar()
                    
                    case '0':
                         print("Saindo do Menu BEM+...")
                         self.ui.pausar()
                         return
                    
                    case _:
                         print("Op√ß√£o invalida!")   
                         self.ui.pausar()
                         Utils.limparTela()    
        
     def menuInicial(self):
          """
          Exibe o menu inicial de cadastro, login e recupera√ß√£o de senha.
         """     
          while True:
               opcao = self.ui.menuInicialRich()
               
               match opcao:
                    case '1':
                         Utils.limparTela()
                         self.ui.tituloDaFuncRich("Cadastro de Usu√°rio", cor="magenta")
                         self.serv_user.cadastrarUsuario()
                         
                    case '2':
                         self.ui.tituloDaFuncRich("Login", cor="yellow")
                         self.login()
                         
                    case '3':
                         Utils.limparTela()
                         self.ui.tituloDaFuncRich("Recuperar Senha", cor="green")
                         self.serv_user.recuperarSenha()
                         
                    case '0':
                         print("At√© mais ent√£o...")
                         break
                    case _:
                         print("op√ß√£o inv√°lida") 
                         self.ui.pausar()
                         Utils.limparTela()                 


# Main:
if __name__ == "__main__":
     app = BemMais()
     app.menuInicial()